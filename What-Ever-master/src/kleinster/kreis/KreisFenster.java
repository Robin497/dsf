/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package kleinster.kreis;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;

/**
 *
 * @author R.Sapakota
 */
public class KreisFenster extends javax.swing.JFrame {

    /**
     * Creates new form KreisFenster
     */
    public KreisFenster() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel(){
            public void paintComponent(Graphics g){
                super.paintComponent(g);
                zeichneTestKreis(g);
                zeichneKreis(g);
                zeichneP(g);
                zeichneGelosteP(g);
                zeichneGewählteP(g);
                zeichneM(g);
            }
        };

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(500, 500));
        setMinimumSize(new java.awt.Dimension(500, 500));

        jPanel1.setMaximumSize(new java.awt.Dimension(700, 700));
        jPanel1.setMinimumSize(new java.awt.Dimension(700, 700));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 826, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 762, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    static int punktD = 4;    //Raius der Punkte
    static int rand = 100;  //sorgt für abstand vom Rand in der Grafik

    //Zeichnet alle Punkte
    public void zeichneP(Graphics g) {
        g.setColor(Color.BLACK);
        Tuple[] punkte = KleinsterKreis.points;
        for (int i = 0; i < punkte.length; i++) {
            g.fillOval(punkte[i].x - punktD + rand, punkte[i].y - punktD + rand, punktD * 2, punktD * 2);
        }
    }

    //zeichnet den Kreis
    public void zeichneKreis(Graphics g) {
        g.setColor(Color.BLUE);
        int rad = (int) KleinsterKreis.radius;
        Tuple m = KleinsterKreis.cCenter;
        g.drawOval(m.x - rad + rand, m.y - rad + rand, rad * 2, rad * 2);
    }
    public void zeichneTestKreis(Graphics g){
        g.setColor(Color.ORANGE);
        int rad = (int) KleinsterKreis.rad;
        Tuple m = KleinsterKreis.center;
        g.drawOval(m.x - rad + rand, m.y - rad + rand, rad * 2, rad * 2);
    }

    //zeichnet die ausgelosten Punkte
    public void zeichneGelosteP(Graphics g) {
        g.setColor(Color.GREEN);
        Tuple punkte[] = KleinsterKreis.points;
        int index[] = KleinsterKreis.ausgelosteP;
        for (int i = 0; i < index.length; i++) {
            Tuple p = punkte[index[i]];
            g.fillOval(p.x - punktD + rand, p.y - punktD + rand, punktD * 2, punktD * 2);
        }
    }

    //zeichnet die Kreisdefinierenden Punkte
    public void zeichneGewählteP(Graphics g) {
        g.setColor(Color.RED);
        Tuple[] p = KleinsterKreis.kreisP;
        for (Tuple p1 : p) {
            if (p1.x != 0 && p1.y != 0) {
                g.fillOval(p1.x - punktD + rand, p1.y - punktD + rand, punktD * 2, punktD * 2);
            }
        }
    }

    //zeichnet den Mittelpunkt des Kreises
    public void zeichneM(Graphics g) {
        g.setColor(Color.CYAN);
        Tuple m = KleinsterKreis.cCenter;
        if (m.x != 0 && m.y != 0) {
            g.fillOval(m.x + rand - punktD, m.y + rand - punktD, punktD * 2, punktD * 2);
        }
    }

    public void refresh() {
        jPanel1.repaint();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(KreisFenster.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(KreisFenster.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(KreisFenster.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(KreisFenster.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new KreisFenster().setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
